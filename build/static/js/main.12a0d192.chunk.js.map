{"version":3,"sources":["utils/request.js","components/WeatherItem/index.js","components/WeatherList/index.js","components/WeatherAdd/index.js","containers/Main/index.js","serviceWorker.js","index.js"],"names":["request","url","fetch","then","result","json","WeatherItem","_ref","weather","idx","deleteCity","react_default","a","createElement","className","onClick","title","name","src","concat","icon","alt","main","temp","humidity","wind","speed","clouds","all","WeatherList","map","weatheritem","components_WeatherItem","key","WeatherAdd","state","value","isOpen","handleChange","target","_this","setState","onSubmit","e","preventDefault","props","_this$state","this","form","onChange","placeholder","disabled","cn","active","React","PureComponent","Main","ip","erorr","isLoaded","handleSubmit","_callee","city","newweather","regenerator_default","wrap","_context","prev","next","sent","cod","error","Object","toConsumableArray","stop","splice","components_WeatherList","WeatherAdd_WeatherAdd","Component","Boolean","window","location","hostname","match","ReactDOM","render","Main_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12a0d192.chunk.js","sourcesContent":["function request(url) {\n  const res = fetch(url).then(result => result.json());\n  return res;\n}\n\nexport default request;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction WeatherItem({ weather, idx, deleteCity }) {\n  return (\n    <div className=\"item\">\n      <div className=\"delete\" onClick={() => deleteCity(idx)} title=\"Удалить город\"></div>\n      <div className=\"name\">{weather.name}</div>\n      <div className=\"box\">\n        <div className=\"img\"><img src={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`} alt=\"img\" /></div>\n        <div className=\"temp\">{weather.main.temp}&#176;C</div>\n      </div>\n      <div className=\"box2\">\n          <p className=\"humidity\">Влажность: {weather.main.humidity}%</p>\n          <p className=\"wind\">Ветер: {weather.wind.speed}м/с</p>\n          <p className=\"clouds\">Облачность: {weather.clouds.all}%</p>\n        </div>\n    </div>\n  );\n}\n\nexport default WeatherItem;","import React from \"react\"\nimport WeatherItem from \"../WeatherItem/index\";\nimport \"./style.css\"\n\nfunction WeatherList({ weather, deleteCity }) {\n  return (\n    <div className=\"list\">\n      {weather.map((weatheritem, idx) => <WeatherItem weather={weatheritem} key={idx} idx={idx} deleteCity={deleteCity} />)}\n    </div>\n  );\n}\n\nexport default WeatherList;","import React from \"react\";\nimport cn from 'classnames';\nimport \"./style.css\"\n\nexport default class WeatherAdd extends React.PureComponent {\n\n  state = {\n    value: \"\",\n    isOpen: false\n  }\n\n  handleChange = ({target: { value }}) => {\n    this.setState({ value });\n  }\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.value);\n    this.setState({ value: '' });\n  }\n\n  onClick = () => {\n    this.setState(()=>{return { isOpen: !this.state.isOpen }});\n  }\n\n  render() {\n    const { value, isOpen } = this.state;\n    const form = \n      <form onSubmit={this.onSubmit}>\n        <input value={this.state.value} onChange={this.handleChange} placeholder=\"Введите город\" />\n        <button disabled={!value}>Добавить</button>\n      </form>;\n    \n    return (\n      <div className=\"wrapper\">\n        <div className={cn('add', {'active': isOpen})} onClick={this.onClick} title=\"Добавить город\">+</div>\n        {isOpen && form}\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport request from \"../../utils/request\";\nimport WeatherList from \"../../components/WeatherList/index\"\nimport WeatherAdd from \"../../components/WeatherAdd/index\"\n\nimport \"./style.css\"\n\nexport default class Main extends React.Component {\n  state = {\n    ip: null,\n    weather: [],\n    erorr: false,\n    isLoaded: false\n  };\n\n  async componentDidMount() {\n    const ip = await request(\"https://ipapi.co/json/\");\n    const weather = await request(`https://api.openweathermap.org/data/2.5/weather?q=${ip.city}&units=metric&APPID=e7b7e505b9f6c9fb24a4e048a62eeeab`);\n    const newweather = [...this.state.weather, weather]\n    this.setState({ ip, weather: newweather, isLoaded: true });\n  }\n\n  handleSubmit = async city => {\n    const weather = await request(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=e7b7e505b9f6c9fb24a4e048a62eeeab`);\n    if (weather.cod === '404') {\n      this.setState({ error: true });\n    } else {\n      const newweather = [...this.state.weather, weather]\n      this.setState({ weather: newweather, error: false });\n    }\n  }\n\n  deleteCity = idx => {\n    const newweather = this.state.weather;\n    newweather.splice(idx, 1);\n    this.setState({ weather: newweather });\n  }\n\n  render() {\n    const {weather, error, isLoaded} = this.state;\n    return (\n        isLoaded ?\n      <div className=\"container\">\n        <WeatherList weather={weather} deleteCity={this.deleteCity} />\n        <WeatherAdd onSubmit={this.handleSubmit} />\n        {error && <div className=\"error\">Вы ввели неверный город</div>}\n      </div>\n      : <div className=\"loading\"></div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './containers/Main';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}